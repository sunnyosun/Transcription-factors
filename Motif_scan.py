"""
Motif occurence calculation in given sequences

"""

###############################################################################
#Modules

from Bio import SeqIO
import optparse

###############################################################################
# Functions

def motif_scan(mdscan_filename, seq_filename, motif_index):
    # reads motif file generated by MDscan
    f = open(mdscan_filename, 'r')
    lines = f.readlines()
    f.close()
    motif_index=int(motif_index)
    matrix_pos = []
    for i in range(len(lines)):
        if lines[i][0]=='1':
            matrix_pos.append(i)
    matrix_freq_1 = []
    for i in matrix_pos:
        matrix_freq_1.append(lines[i:i+8])
    matrix_freq_2 = []
    for i in matrix_freq_1[motif_index-1]:
        matrix_freq_2.append([float(i) for i in i.split()[1:5]])
    w = len(matrix_freq_2)
    matrix_dic = {'A':[], 'C':[], 'G':[], 'T':[], 'N':[0]*w}
    for i in matrix_freq_2:
        matrix_dic['A'].append(i[0])
        matrix_dic['C'].append(i[1])
        matrix_dic['G'].append(i[2])
        matrix_dic['T'].append(i[3])
    seq = list(SeqIO.parse(seq_filename, 'fasta'))
    for k in range(0,len(seq)):
        print k+1
        s = str(seq[k].seq)
        wig_out = []
        start = int(seq[k].name.split(':')[1].split('-')[0])-50
        wig_out.append('fixedStep chrom='+seq[k].name.split(':')[0].split('-')[1]+' start='+str(start)+ ' step=1')
        for i in range(len(s)-w+1):
            score = 1
            for j in range(0,w):
                score*= matrix_dic[s[i+j]][j]
            wig_out.append(str(score))
        f=open(mdscan_filename+'.wig','a')
        f.write('\n'.join(wig_out))
        f.write('\n')
        f.close()


# parse object for managing input options.      
parser = optparse.OptionParser()

parser.add_option('-m', dest = 'mdscan_filename', default = '', help = 'This input\
 is the output file from mdscan')
parser.add_option('-s', dest = 'seq_filename', default = '', help = 'This input\
 is the fasta sequences filename')
parser.add_option('-i', dest = 'motif_index', default = '1', help = 'This input \
is the index of motif')

# loads the inputs
(options, args) = parser.parse_args()

# reads the inputs from command lines
mdscan_filename = options.mdscan_filename
seq_filename = options.seq_filename
motif_index = int(options.motif_index)

motif_scan(mdscan_filename, seq_filename, motif_index)

