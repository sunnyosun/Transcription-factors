"""
Motif occurence calculation in yeast genome

"""

###############################################################################
#Modules

from Bio import SeqIO
import optparse
import re
import datetime

###############################################################################
# Functions


def get_complement (seq):
    """
    This function takes a sequence (str) as input and returns
    the reverse of its complementary sequence (str).
    """
    # imports string module
    import string
    # changes input into upper case
    seq = seq.upper()
    # creates a table of complementary base pairs
    compbase = string.maketrans('ATCGN', 'TAGCN')
    # returns the complementary bases according to the compbase
    # table, and put into reversed order
    return seq.translate(compbase)


def motif_scan(sk1_filename, motif_filename, motif_index):
    # reads motif file generated by MDscan
    f = open(motif_filename, 'r')
    lines = f.readlines()
    f.close()
    motif_index=int(motif_index)
    matrix_pos = []
    for i in range(len(lines)):
        if lines[i][0]=='1':
            matrix_pos.append(i)
    matrix_freq_1 = []
    for i in matrix_pos:
        matrix_freq_1.append(lines[i:i+8])
    matrix_freq_2 = []
    for i in matrix_freq_1[motif_index-1]:
        matrix_freq_2.append([float(i) for i in i.split()[1:5]])
    w = len(matrix_freq_2)
    matrix_dic = {'A':[], 'C':[], 'G':[], 'T':[], 'N':[0]*w}
    for i in matrix_freq_2:
        matrix_dic['A'].append(i[0])
        matrix_dic['C'].append(i[1])
        matrix_dic['G'].append(i[2])
        matrix_dic['T'].append(i[3])
    print datetime.datetime.now()
    for k in range(0,16):
        print k+1
        sk1 = list(SeqIO.parse(sk1_filename, 'fasta'))[k]
        wig_out = []
        wig_out.append('fixedStep chrom='+sk1.name+' start=1 step=1')
        #seq = str(sk1[i].seq)
    #seq='TCTTGACAGGAATGTTGTAAACCATTGTACAAATATGGAATAAATTTCTT'
        seq=str(sk1.seq)
        seq=get_complement(seq)
        count = 0
        for i in range(len(seq)-w+1):
            count+= 1
            if re.search('0000$',str(count)):
                print count
            score = 1
            for j in range(w-1,0-1,-1):
                score*= matrix_dic[seq[i+j]][w-1-j]
            wig_out.append(str(score))
        print datetime.datetime.now()
        f=open('genome_scan_re.wig','a')
        f.write('\n'.join(wig_out))
        f.write('\n')
        f.close()


# parse object for managing input options.      
parser = optparse.OptionParser()

parser.add_option('-g', dest = 'sk1_filename', default = '', help = 'This input\
 is the fasta file of the sk1 genome sequences')
parser.add_option('-m', dest = 'motif_filename', default = '', help = 'This input\
 is the motif filename')
parser.add_option('-i', dest = 'motif_index', default = '1', help = 'This input \
is the index of motif')

# loads the inputs
(options, args) = parser.parse_args()

# reads the inputs from command lines
sk1_filename = options.sk1_filename
motif_filename = options.motif_filename
motif_index = int(options.motif_index)

motif_scan(sk1_filename, motif_filename, motif_index)
